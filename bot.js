const hydraBot = require('hydra-bot');
const path = require('path');
const { ipcMain } = require('electron');

const cookiesPath = path.join(__dirname, 'cookies.json');
const maxActiveChats = 3;

let bot;
let activeChatsList = [];
const defaultMessage = `Ol√°! Para iniciarmos seu atendimento, envie suas informa√ß√µes no formato abaixo:

Nome completo:
Cidade:
Cargo: (Aluno, Supervisor, Secret√°rio, Professor, Administrador, Respons√°vel)
Escola: (Informe o nome da escola, se voc√™ for Aluno, Respons√°vel, Professor ou Supervisor)

‚ö†Ô∏è Aten√ß√£o: Certifique-se de preencher todas as informa√ß√µes corretamente para agilizar o atendimento.`;

// Inicia o bot
async function startHydraBot() {
  try {
    bot = await hydraBot.initServer({
      puppeteerOptions: {
        headless: false,
        devtools: false,
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
      },
      printQRInTerminal: true,
    });

    console.log('Servidor Hydra iniciado!');

    bot.on('connection', async (conn) => {
      if (conn.connect) {
        console.log('Conex√£o Hydra estabelecida.');
        startListeningForMessages(conn);
      } else {
        console.error('Erro na conex√£o Hydra.');
      }
    });

    bot.on('qrcode', (qrcode) => {
      console.log('QR Code gerado pelo Hydra:', qrcode);
    });
  } catch (error) {
    console.error('Erro ao iniciar o Hydra:', error);
  }
}

// Fun√ß√£o que escuta as mensagens recebidas
function startListeningForMessages(conn) {
  conn.client.ev.on('newMessage', async (newMsg) => {
    const chatId = newMsg.result.chatId;

    if (!newMsg.result.fromMe) {
      const messageText = newMsg.result.body.toLowerCase();

      if (messageText.startsWith("nome:")) {
        const userInfo = parseUserInfo(messageText);
        if (userInfo) {
          if (activeChatsList.length < maxActiveChats) {
            activeChatsList.push(userInfo);
            await sendMessage(conn, chatId, `Obrigado pelas informa√ß√µes, ${userInfo.name}! Estamos iniciando seu atendimento.`);
            await sendProblemOptions(conn, chatId); // Envia op√ß√µes de problemas
          } else {
            userInfo.isWaiting = true;  // Define o usu√°rio como aguardando
            activeChatsList.push(userInfo);  // Adiciona √† lista de espera
            await sendMessage(conn, chatId, `Voc√™ est√° na lista de espera. Sua posi√ß√£o na fila √©: ${activeChatsList.filter(chat => chat.isWaiting).length}. Aguarde sua vez.`);
          }
          sendStatusUpdateToMainProcess();
        } else {
          await sendMessage(conn, chatId, 'Por favor, insira suas informa√ß√µes no formato correto.');
        }
      } else if (messageText === '6') {
        // Resposta quando o usu√°rio escolhe a op√ß√£o de acessar os v√≠deos
        await sendMessage(conn, chatId, 'Para mais informa√ß√µes, acesse o canal iEscolar e assista aos v√≠deos explicativos para resolver as d√∫vidas mais comuns:\n\nüì∫ [Clique aqui para assistir aos v√≠deos do iEscolar](https://www.youtube.com/@iescolaronline5069/videos)');
        sendProblemToFrontEnd('V√≠deos iEscolar');  // Envia a informa√ß√£o do problema para o front-end
      } else if (messageText === '1') {
        sendProblemToFrontEnd('Falha no acesso ao sistema');
      } else if (messageText === '2') {
        sendProblemToFrontEnd('Erro ao cadastrar aluno/funcion√°rio');
      } else if (messageText === '3') {
        sendProblemToFrontEnd('Problemas com o di√°rio de classe');
      } else if (messageText === '4') {
        sendProblemToFrontEnd('Falha no registro de notas');
      } else if (messageText === '5') {
        sendProblemToFrontEnd('Outro problema');
      } else {
        await sendMessage(conn, chatId, defaultMessage);
      }
    }
  });

  conn.client.ev.on('chatClosed', async (chatId) => {
    console.log('Chat encerrado:', chatId);
    activeChatsList = activeChatsList.filter(chat => chat.chatId !== chatId);  // Remove da lista
    sendStatusUpdateToMainProcess();
  });
}

// Fun√ß√£o que analisa a mensagem de texto e extrai as informa√ß√µes
function parseUserInfo(messageText) {
  const info = {};
  const lines = messageText.split('\n');
  for (const line of lines) {
    const [key, ...value] = line.split(':');
    if (key && value.length) {
      info[key.trim().toLowerCase()] = value.join(':').trim();
    }
  }
  if (info.nome && info.cidade && info.cargo && info.escola) {
    return {
      name: capitalize(info.nome),
      city: capitalize(info.cidade),
      role: capitalize(info.cargo),
      school: capitalize(info.escola),
    };
  }
  return null;
}

// Fun√ß√£o para capitalizar as primeiras letras das palavras
function capitalize(str) {
  return str
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
}

// Fun√ß√£o para enviar mensagens ao usu√°rio
async function sendMessage(conn, chatId, message) {
  await conn.client.sendMessage({ to: chatId, body: message, options: { type: 'sendText' } });
}

// Fun√ß√£o que envia as op√ß√µes de problemas para o usu√°rio
async function sendProblemOptions(conn, chatId) {
  const problemOptions = `Por favor, selecione o tipo de problema que voc√™ est√° enfrentando:

1Ô∏è‚É£ Falha no acesso ao sistema
2Ô∏è‚É£ Erro ao cadastrar aluno/funcion√°rio
3Ô∏è‚É£ Problemas com o di√°rio de classe
4Ô∏è‚É£ Falha no registro de notas
5Ô∏è‚É£ Outros (Caso seu problema n√£o esteja na lista, digite abaixo)
6Ô∏è‚É£ Veja as d√∫vidas mais comuns no canal iEscolar (v√≠deos explicativos)`;

  await sendMessage(conn, chatId, problemOptions);
}

// Fun√ß√£o para enviar a atualiza√ß√£o de status ao processo principal (front-end)
function sendStatusUpdateToMainProcess() {
  const activeChats = activeChatsList.filter(chat => !chat.isWaiting);  // Filtra chats ativos
  const waitingList = activeChatsList.filter(chat => chat.isWaiting);  // Filtra chats na lista de espera

  ipcMain.emit('updateStatus', null, {
    activeChats,
    waitingList,
  });
}

// Fun√ß√£o para enviar o problema selecionado para o front-end
function sendProblemToFrontEnd(problem) {
  ipcMain.emit('userProblem', null, problem);
}

module.exports = { startHydraBot };
